

//use chemical_elements::{ChemicalComposition, ElementSpecification};

mod chemistry;
mod ms;
mod msms;

#[macro_use]
extern crate lazy_static;

use anyhow::*;
use itertools::Itertools;
use mzdata::{CentroidPeak, MGFReader, ParamDescribed};

use chemistry::constants::atom;
use chemistry::composition::*;
use chemistry::mass_calc::*;
use chemistry::table::*;
use msms::model::*;
//use test::bench::iter;
use crate::ms::utils::mass_to_mz;
use crate::msms::annotator::{annotate_spectrum, PeakSelectionStrategy};
use crate::msms::fragmentation::{compute_frag_series_mz_values, compute_fragmentation_table};
use crate::msms::io::read_mgf_file;


fn main () -> Result<()> {
    /*println!("hello core {:?}", PROTEINOGENIC_AMINO_ACID_TABLE.amino_acids);

    let comp1 = parse_atom_composition("C(12) H(3)"); // , *BIOMOLECULE_ATOM_TABLE
    let comp2 = parse_atom_composition("C(14) H(1) O(4)");

    println!("comp is {:?}", sum_atom_compositions(comp1.unwrap(), comp2.unwrap()));

    let aa_comp = parse_aa_composition("STELLIR");
    println!("aa comp is {:?}",aa_comp.unwrap() );

    let t = &*STANDARD_AMINO_ACID_TABLE;
    let seq_mass = calc_aa_seq_mass("IAQLEEELEEEQGNTELINDR", t, true);
    println!("STELLIR mass is {:?}",seq_mass.unwrap() );

    let frag_mass = calc_aa_seq_mass("IAQLE", t, true).unwrap();
    let bmass = frag_mass + get_ion_mono_mass_shift(FragmentIonSeries::b);

    let bmz = mass_to_mz(bmass, 2);*/

    // Our example: http://tol-brandir:9000/PWX/dse/lorikeet/spectrum_viewer?project_id=452&peptide_match_id=66491178
    //let seq = String::from("IAQLEEELEEEQGNTELINDR");
    //let seq_len = seq.len();

    let prec_max_charge = 5;
    let prec_mz_error_tol = 0.01;
    let frag_mz_error_tol = 0.02;

    let t = &*STANDARD_AMINO_ACID_TABLE;
    let seq_mass = calc_aa_seq_mass("IAQLEEELEEEQGNTELINDR", t, true)?;

    use FragmentIonSeries::*;

    let mut frag_table_by_charge = std::collections::HashMap::new();


    for prec_charge in 2 ..= prec_max_charge {

        let frag_charges: Vec<i8> = (1 .. prec_charge).collect();
        let frag_table = compute_fragmentation_table(
            "IAQLEEELEEEQGNTELINDR",
            &[a,a_H2O,a_NH3,b,b_H2O,b_NH3,y,y_H2O,y_NH3],
            &frag_charges
        )?;

        frag_table_by_charge.insert(prec_charge,frag_table);
    }

    /*
    let frag_table_prec_3 = compute_fragmentation_table(
        "IAQLEEELEEEQGNTELINDR",
        &[a,a_H2O,a_NH3,b,b_H2O,b_NH3,y,y_H2O,y_NH3],
        &[1,2].
    )?;
    let frag_table_prec_4 = compute_fragmentation_table(
        "IAQLEEELEEEQGNTELINDR",
        &[a,a_H2O,a_NH3,b,b_H2O,b_NH3,y,y_H2O,y_NH3],
        &[1,2,3]
    )?;
    let frag_table_prec_5 = compute_fragmentation_table(
        "IAQLEEELEEEQGNTELINDR",
        &[a,a_H2O,a_NH3,b,b_H2O,b_NH3,y,y_H2O,y_NH3],
        &[1,2,3,4]
    )?;*/

    /*for frag_col in frag_table.clone() {
        for mz in frag_col.mz_values {
            println!("{} {}", frag_col.ion_type, mz)
        }
    }*/

    //read_mgf_file();

    //let data = [[110.071,85730],[112.087,17360],[114.055,17910],[115.05,12850],[115.086,19520],[116.071,21350],[120.08,99560],[126.055,25580],[127.05,35320],[127.087,29580],[129.066,165800],[129.102,126000],[129.113,16630],[130.049,50790],[130.068,12190],[130.086,60870],[133.061,34960],[136.075,164000],[138.055,35750],[141.066,30260],[143.118,20580],[147.076,63490],[147.112,102800],[148.061,28010],[155.081,62000],[157.061,13110],[157.133,213000],[157.148,16800],[158.092,53780],[158.137,12650],[159.076,14440],[159.091,23330],[161.691,9982],[167.081,23240],[168.065,17910],[169.061,29630],[169.133,27280],[171.112,17520],[172.072,48300],[173.092,18040],[173.129,21890],[175.119,636500],[176.123,34130],[183.077,40060],[183.113,14260],[183.148,27030],[185.093,18050],[185.128,233400],[185.162,13790],[186.088,55910],[186.131,21800],[187.071,28770],[188.103,26230],[195.077,44420],[197.128,127100],[198.088,21150],[199.071,23620],[199.181,41240],[200.103,198300],[200.138,17650],[201.124,16360],[202.154,40080],[203.103,49160],[204.087,15230],[211.143,18980],[212.103,42230],[213.086,119500],[213.159,17200],[214.061,16010],[214.154,96980],[215.139,119200],[216.097,57960],[216.142,23340],[223.071,15740],[224.139,18410],[225.123,87470],[226.08,13340],[226.12,31550],[226.153,17980],[227.103,17410],[227.176,26200],[228.098,28390],[228.134,15160],[230.077,45450],[230.113,11490],[231.097,172500],[231.123,14880],[232.101,17440],[238.083,17210],[240.098,252900],[241.081,435600],[242.085,51860],[242.15,96010],[243.133,308500],[244.093,13860],[244.136,41250],[252.107,11870],[253.195,10550],[254.15,31550],[255.109,68090],[258.108,135300],[259.092,522200],[260.094,61120],[260.197,47610],[268.167,31970],[270.107,13910],[272.172,36180],[273.118,74450],[276.12,21560],[282.12,16420],[283.104,38140],[285.192,38880],[286.106,12060],[288.203,12410],[290.145,173000],[291.148,12020],[296.16,15470],[297.119,15060],[297.195,13190],[298.104,12760],[300.129,52210],[310.212,12820],[311.172,41220],[313.186,732400],[314.192,108700],[315.13,13680],[325.188,24930],[326.172,60310],[327.129,13460],[328.116,13540],[329.146,13020],[337.142,10860],[338.206,10480],[339.122,14150],[339.167,38650],[341.183,35620],[342.132,24520],[344.185,50520],[349.115,19000],[351.13,33390],[352.115,69910],[353.119,18700],[353.181,25810],[354.165,183000],[355.168,45220],[356.164,16960],[356.219,44140],[362.165,10170],[366.139,54930],[367.129,19070],[369.138,110900],[370.125,202900],[371.133,26550],[371.193,75560],[372.176,265400],[373.179,49270],[379.198,17650],[381.251,28240],[383.167,29370],[384.149,81680],[385.139,23460],[387.157,167100],[388.133,171500],[389.136,27160],[390.205,24290],[394.139,17980],[397.205,51410],[398.214,16930],[398.274,52790],[401.175,23160],[402.17,12600],[402.93,11960],[404.188,859400],[405.191,126500],[406.191,15970],[409.243,15400],[410.203,37100],[411.158,25240],[412.146,15330],[413.217,13390],[414.236,14880],[415.155,13840],[416.287,31120],[419.189,11520],[421.723,29320],[422.224,13400],[424.218,36430],[425.205,56090],[426.157,20650],[426.27,146600],[427.264,52630],[428.262,15160],[430.729,14350],[431.731,10450],[436.213,15670],[437.139,15550],[437.205,43730],[438.195,17980],[439.257,19810],[442.228,174700],[443.227,52160],[449.239,13650],[454.227,11520],[455.216,38500],[456.212,10280],[460.145,15950],[465.196,55910],[466.198,13350],[467.251,33880],[468.174,12890],[470.226,21470],[473.225,37940],[478.159,14260],[478.745,33370],[479.238,31750],[480.172,12700],[482.227,32790],[483.209,196300],[484.206,56460],[485.267,29780],[494.199,17480],[495.181,71430],[496.173,36210],[498.19,33710],[498.74,27990],[499.169,15090],[499.252,18060],[500.242,90020],[501.218,228500],[502.225,62070],[507.257,19790],[507.747,32220],[510.29,42020],[511.291,23070],[512.211,39540],[513.198,39440],[516.187,22140],[517.189,27710],[517.272,821300],[518.276,157200],[519.272,58960],[519.762,17590],[520.275,13780],[526.256,16710],[527.32,19410],[528.242,17460],[528.762,15980],[529.228,12800],[530.221,24940],[536.239,18620],[537.3,32490],[538.29,43550],[539.288,13340],[551.779,25360],[553.263,55290],[554.249,67010],[554.763,13720],[555.317,168200],[556.312,63410],[557.31,14790],[557.779,22090],[562.279,29270],[562.769,74600],[563.27,62540],[566.781,59780],[567.283,42940],[568.293,16750],[569.294,15460],[571.278,211100],[571.782,82090],[572.271,71480],[575.787,137000],[576.289,93420],[576.792,26070],[578.289,20420],[580.284,17190],[580.8,14660],[584.253,15070],[585.248,14070],[586.311,29920],[594.246,45740],[596.295,48130],[597.302,19660],[606.215,20010],[608.262,17730],[609.263,16660],[611.275,40420],[612.247,150500],[613.239,22850],[613.348,20350],[614.31,94580],[615.302,32060],[616.282,11990],[618.346,22190],[618.782,28720],[622.298,13170],[623.24,21110],[624.229,32800],[625.24,20300],[626.277,21360],[627.292,23840],[629.281,66450],[629.842,37650],[630.36,839300],[631.267,20400],[631.363,245200],[632.361,48580],[639.338,29930],[640.306,13640],[641.252,25930],[642.257,16260],[648.333,14270],[656.367,20520],[657.349,13190],[659.262,22220],[663.299,14440],[665.276,16600],[666.344,42540],[667.336,53570],[674.285,17520],[682.311,49180],[683.301,37720],[684.357,167500],[685.354,89780],[685.873,13590],[686.34,22500],[698.327,14290],[700.316,139600],[700.819,13410],[701.309,63400],[702.373,18060],[714.363,15620],[717.414,15200],[723.301,21030],[723.45,57230],[724.346,36000],[725.332,77050],[726.338,31190],[727.375,20820],[735.268,15960],[737.308,15370],[741.408,60500],[742.375,88720],[743.349,83880],[744.354,41710],[752.287,31060],[756.334,33490],[756.83,17870],[758.32,21800],[759.405,621700],[760.408,235000],[761.41,63470],[765.332,20670],[768.374,54760],[769.377,24030],[770.288,19570],[771.285,21420],[776.368,13570],[778.359,22970],[779.405,105000],[780.411,42100],[785.394,67210],[786.396,31600],[788.448,19260],[795.385,76630],[796.375,81760],[797.4,35410],[798.415,23280],[812.399,21520],[813.399,463600],[814.399,181400],[815.4,69900],[816.421,34860],[824.389,71620],[824.887,30790],[826.383,17970],[829.361,14450],[830.389,15480],[836.371,21080],[839.402,14420],[840.395,19820],[842.439,60900],[843.423,37730],[848.394,16260],[853.415,26430],[854.386,41500],[856.435,14610],[857.4,16310],[860.446,550000],[861.449,219000],[862.452,44640],[870.421,19410],[871.405,44720],[872.392,65200],[873.388,26490],[881.455,25380],[884.375,21940],[887.363,17160],[888.347,26200],[890.44,17720],[891.409,35880],[892.382,21730],[897.421,18840],[898.481,25350],[901.395,17650],[903.382,16660],[907.426,16890],[908.473,61540],[909.456,39220],[924.424,20040],[925.422,34120],[926.483,212700],[927.49,112800],[928.486,27930],[939.434,24550],[940.428,26720],[942.443,117500],[943.447,71110],[956.481,53400],[957.465,117800],[958.457,60640],[959.486,25870],[974.488,354100],[975.492,158600],[976.487,46140],[982.454,29070],[983.446,22270],[984.45,17450],[985.477,18750],[986.462,16740],[987.483,22600],[994.426,17920],[996.463,24240],[997.47,33810],[999.478,21880],[1000.446,35300],[1001.45,35400],[1002.441,22610],[1004.455,32540],[1012.445,28920],[1013.499,178300],[1014.489,380000],[1015.485,165400],[1016.49,50580],[1017.473,13750],[1031.51,1086000],[1032.513,571800],[1033.509,166400],[1034.515,34250],[1036.448,20360],[1037.511,42250],[1038.509,31830],[1039.498,19930],[1053.473,17720],[1055.523,166200],[1056.521,90130],[1057.53,24090],[1071.485,40680],[1072.478,26190],[1105.528,40820],[1106.538,31470],[1107.5,18220],[1124.542,77450],[1125.518,93170],[1126.592,130300],[1127.604,50730],[1129.5,30490],[1141.557,78470],[1142.542,257300],[1143.543,142500],[1144.557,54160],[1156.6,17420],[1159.566,302700],[1160.576,183400],[1161.557,70230],[1167.556,29530],[1184.564,94410],[1185.562,60750],[1186.542,26730],[1224.582,42870],[1225.592,21420],[1236.544,30610],[1237.54,22760],[1253.582,76920],[1254.58,57700],[1257.668,101600],[1258.652,44210],[1270.597,77700],[1271.585,103700],[1272.593,53810],[1273.588,29270],[1288.605,132800],[1289.62,81090],[1290.626,29620],[1305.606,23970],[1313.597,24830],[1382.621,35240],[1383.611,41450],[1384.594,25810],[1399.64,64480],[1400.629,116800],[1401.617,58580],[1417.667,96100],[1418.65,47650],[1419.65,26830],[1510.679,17550],[1511.672,24120],[1512.655,37230],[1528.673,30780],[1529.685,41320],[1530.673,36070],[1546.696,46090],[1547.711,32630],[1642.749,16910]];
    let spectrum_peaks = vec![[110.071,85730.0],[112.087,17360.0],[114.055,17910.0],[115.05,12850.0],[115.086,19520.0],[116.071,21350.0],[120.08,99560.0],[126.055,25580.0],[127.05,35320.0],[127.087,29580.0],[129.066,165800.0],[129.102,126000.0],[129.113,16630.0],[130.049,50790.0],[130.068,12190.0],[130.086,60870.0],[133.061,34960.0],[136.075,164000.0],[138.055,35750.0],[141.066,30260.0],[143.118,20580.0],[147.076,63490.0],[147.112,102800.0],[148.061,28010.0],[155.081,62000.0],[157.061,13110.0],[157.133,213000.0],[157.148,16800.0],[158.092,53780.0],[158.137,12650.0],[159.076,14440.0],[159.091,23330.0],[161.691,9982.0],[167.081,23240.0],[168.065,17910.0],[169.061,29630.0],[169.133,27280.0],[171.112,17520.0],[172.072,48300.0],[173.092,18040.0],[173.129,21890.0],[175.119,636500.0],[176.123,34130.0],[183.077,40060.0],[183.113,14260.0],[183.148,27030.0],[185.093,18050.0],[185.128,233400.0],[185.162,13790.0],[186.088,55910.0],[186.131,21800.0],[187.071,28770.0],[188.103,26230.0],[195.077,44420.0],[197.128,127100.0],[198.088,21150.0],[199.071,23620.0],[199.181,41240.0],[200.103,198300.0],[200.138,17650.0],[201.124,16360.0],[202.154,40080.0],[203.103,49160.0],[204.087,15230.0],[211.143,18980.0],[212.103,42230.0],[213.086,119500.0],[213.159,17200.0],[214.061,16010.0],[214.154,96980.0],[215.139,119200.0],[216.097,57960.0],[216.142,23340.0],[223.071,15740.0],[224.139,18410.0],[225.123,87470.0],[226.08,13340.0],[226.12,31550.0],[226.153,17980.0],[227.103,17410.0],[227.176,26200.0],[228.098,28390.0],[228.134,15160.0],[230.077,45450.0],[230.113,11490.0],[231.097,172500.0],[231.123,14880.0],[232.101,17440.0],[238.083,17210.0],[240.098,252900.0],[241.081,435600.0],[242.085,51860.0],[242.15,96010.0],[243.133,308500.0],[244.093,13860.0],[244.136,41250.0],[252.107,11870.0],[253.195,10550.0],[254.15,31550.0],[255.109,68090.0],[258.108,135300.0],[259.092,522200.0],[260.094,61120.0],[260.197,47610.0],[268.167,31970.0],[270.107,13910.0],[272.172,36180.0],[273.118,74450.0],[276.12,21560.0],[282.12,16420.0],[283.104,38140.0],[285.192,38880.0],[286.106,12060.0],[288.203,12410.0],[290.145,173000.0],[291.148,12020.0],[296.16,15470.0],[297.119,15060.0],[297.195,13190.0],[298.104,12760.0],[300.129,52210.0],[310.212,12820.0],[311.172,41220.0],[313.186,732400.0],[314.192,108700.0],[315.13,13680.0],[325.188,24930.0],[326.172,60310.0],[327.129,13460.0],[328.116,13540.0],[329.146,13020.0],[337.142,10860.0],[338.206,10480.0],[339.122,14150.0],[339.167,38650.0],[341.183,35620.0],[342.132,24520.0],[344.185,50520.0],[349.115,19000.0],[351.13,33390.0],[352.115,69910.0],[353.119,18700.0],[353.181,25810.0],[354.165,183000.0],[355.168,45220.0],[356.164,16960.0],[356.219,44140.0],[362.165,10170.0],[366.139,54930.0],[367.129,19070.0],[369.138,110900.0],[370.125,202900.0],[371.133,26550.0],[371.193,75560.0],[372.176,265400.0],[373.179,49270.0],[379.198,17650.0],[381.251,28240.0],[383.167,29370.0],[384.149,81680.0],[385.139,23460.0],[387.157,167100.0],[388.133,171500.0],[389.136,27160.0],[390.205,24290.0],[394.139,17980.0],[397.205,51410.0],[398.214,16930.0],[398.274,52790.0],[401.175,23160.0],[402.17,12600.0],[402.93,11960.0],[404.188,859400.0],[405.191,126500.0],[406.191,15970.0],[409.243,15400.0],[410.203,37100.0],[411.158,25240.0],[412.146,15330.0],[413.217,13390.0],[414.236,14880.0],[415.155,13840.0],[416.287,31120.0],[419.189,11520.0],[421.723,29320.0],[422.224,13400.0],[424.218,36430.0],[425.205,56090.0],[426.157,20650.0],[426.27,146600.0],[427.264,52630.0],[428.262,15160.0],[430.729,14350.0],[431.731,10450.0],[436.213,15670.0],[437.139,15550.0],[437.205,43730.0],[438.195,17980.0],[439.257,19810.0],[442.228,174700.0],[443.227,52160.0],[449.239,13650.0],[454.227,11520.0],[455.216,38500.0],[456.212,10280.0],[460.145,15950.0],[465.196,55910.0],[466.198,13350.0],[467.251,33880.0],[468.174,12890.0],[470.226,21470.0],[473.225,37940.0],[478.159,14260.0],[478.745,33370.0],[479.238,31750.0],[480.172,12700.0],[482.227,32790.0],[483.209,196300.0],[484.206,56460.0],[485.267,29780.0],[494.199,17480.0],[495.181,71430.0],[496.173,36210.0],[498.19,33710.0],[498.74,27990.0],[499.169,15090.0],[499.252,18060.0],[500.242,90020.0],[501.218,228500.0],[502.225,62070.0],[507.257,19790.0],[507.747,32220.0],[510.29,42020.0],[511.291,23070.0],[512.211,39540.0],[513.198,39440.0],[516.187,22140.0],[517.189,27710.0],[517.272,821300.0],[518.276,157200.0],[519.272,58960.0],[519.762,17590.0],[520.275,13780.0],[526.256,16710.0],[527.32,19410.0],[528.242,17460.0],[528.762,15980.0],[529.228,12800.0],[530.221,24940.0],[536.239,18620.0],[537.3,32490.0],[538.29,43550.0],[539.288,13340.0],[551.779,25360.0],[553.263,55290.0],[554.249,67010.0],[554.763,13720.0],[555.317,168200.0],[556.312,63410.0],[557.31,14790.0],[557.779,22090.0],[562.279,29270.0],[562.769,74600.0],[563.27,62540.0],[566.781,59780.0],[567.283,42940.0],[568.293,16750.0],[569.294,15460.0],[571.278,211100.0],[571.782,82090.0],[572.271,71480.0],[575.787,137000.0],[576.289,93420.0],[576.792,26070.0],[578.289,20420.0],[580.284,17190.0],[580.8,14660.0],[584.253,15070.0],[585.248,14070.0],[586.311,29920.0],[594.246,45740.0],[596.295,48130.0],[597.302,19660.0],[606.215,20010.0],[608.262,17730.0],[609.263,16660.0],[611.275,40420.0],[612.247,150500.0],[613.239,22850.0],[613.348,20350.0],[614.31,94580.0],[615.302,32060.0],[616.282,11990.0],[618.346,22190.0],[618.782,28720.0],[622.298,13170.0],[623.24,21110.0],[624.229,32800.0],[625.24,20300.0],[626.277,21360.0],[627.292,23840.0],[629.281,66450.0],[629.842,37650.0],[630.36,839300.0],[631.267,20400.0],[631.363,245200.0],[632.361,48580.0],[639.338,29930.0],[640.306,13640.0],[641.252,25930.0],[642.257,16260.0],[648.333,14270.0],[656.367,20520.0],[657.349,13190.0],[659.262,22220.0],[663.299,14440.0],[665.276,16600.0],[666.344,42540.0],[667.336,53570.0],[674.285,17520.0],[682.311,49180.0],[683.301,37720.0],[684.357,167500.0],[685.354,89780.0],[685.873,13590.0],[686.34,22500.0],[698.327,14290.0],[700.316,139600.0],[700.819,13410.0],[701.309,63400.0],[702.373,18060.0],[714.363,15620.0],[717.414,15200.0],[723.301,21030.0],[723.45,57230.0],[724.346,36000.0],[725.332,77050.0],[726.338,31190.0],[727.375,20820.0],[735.268,15960.0],[737.308,15370.0],[741.408,60500.0],[742.375,88720.0],[743.349,83880.0],[744.354,41710.0],[752.287,31060.0],[756.334,33490.0],[756.83,17870.0],[758.32,21800.0],[759.405,621700.0],[760.408,235000.0],[761.41,63470.0],[765.332,20670.0],[768.374,54760.0],[769.377,24030.0],[770.288,19570.0],[771.285,21420.0],[776.368,13570.0],[778.359,22970.0],[779.405,105000.0],[780.411,42100.0],[785.394,67210.0],[786.396,31600.0],[788.448,19260.0],[795.385,76630.0],[796.375,81760.0],[797.4,35410.0],[798.415,23280.0],[812.399,21520.0],[813.399,463600.0],[814.399,181400.0],[815.4,69900.0],[816.421,34860.0],[824.389,71620.0],[824.887,30790.0],[826.383,17970.0],[829.361,14450.0],[830.389,15480.0],[836.371,21080.0],[839.402,14420.0],[840.395,19820.0],[842.439,60900.0],[843.423,37730.0],[848.394,16260.0],[853.415,26430.0],[854.386,41500.0],[856.435,14610.0],[857.4,16310.0],[860.446,550000.0],[861.449,219000.0],[862.452,44640.0],[870.421,19410.0],[871.405,44720.0],[872.392,65200.0],[873.388,26490.0],[881.455,25380.0],[884.375,21940.0],[887.363,17160.0],[888.347,26200.0],[890.44,17720.0],[891.409,35880.0],[892.382,21730.0],[897.421,18840.0],[898.481,25350.0],[901.395,17650.0],[903.382,16660.0],[907.426,16890.0],[908.473,61540.0],[909.456,39220.0],[924.424,20040.0],[925.422,34120.0],[926.483,212700.0],[927.49,112800.0],[928.486,27930.0],[939.434,24550.0],[940.428,26720.0],[942.443,117500.0],[943.447,71110.0],[956.481,53400.0],[957.465,117800.0],[958.457,60640.0],[959.486,25870.0],[974.488,354100.0],[975.492,158600.0],[976.487,46140.0],[982.454,29070.0],[983.446,22270.0],[984.45,17450.0],[985.477,18750.0],[986.462,16740.0],[987.483,22600.0],[994.426,17920.0],[996.463,24240.0],[997.47,33810.0],[999.478,21880.0],[1000.446,35300.0],[1001.45,35400.0],[1002.441,22610.0],[1004.455,32540.0],[1012.445,28920.0],[1013.499,178300.0],[1014.489,380000.0],[1015.485,165400.0],[1016.49,50580.0],[1017.473,13750.0],[1031.51,1086000.0],[1032.513,571800.0],[1033.509,166400.0],[1034.515,34250.0],[1036.448,20360.0],[1037.511,42250.0],[1038.509,31830.0],[1039.498,19930.0],[1053.473,17720.0],[1055.523,166200.0],[1056.521,90130.0],[1057.53,24090.0],[1071.485,40680.0],[1072.478,26190.0],[1105.528,40820.0],[1106.538,31470.0],[1107.5,18220.0],[1124.542,77450.0],[1125.518,93170.0],[1126.592,130300.0],[1127.604,50730.0],[1129.5,30490.0],[1141.557,78470.0],[1142.542,257300.0],[1143.543,142500.0],[1144.557,54160.0],[1156.6,17420.0],[1159.566,302700.0],[1160.576,183400.0],[1161.557,70230.0],[1167.556,29530.0],[1184.564,94410.0],[1185.562,60750.0],[1186.542,26730.0],[1224.582,42870.0],[1225.592,21420.0],[1236.544,30610.0],[1237.54,22760.0],[1253.582,76920.0],[1254.58,57700.0],[1257.668,101600.0],[1258.652,44210.0],[1270.597,77700.0],[1271.585,103700.0],[1272.593,53810.0],[1273.588,29270.0],[1288.605,132800.0],[1289.62,81090.0],[1290.626,29620.0],[1305.606,23970.0],[1313.597,24830.0],[1382.621,35240.0],[1383.611,41450.0],[1384.594,25810.0],[1399.64,64480.0],[1400.629,116800.0],[1401.617,58580.0],[1417.667,96100.0],[1418.65,47650.0],[1419.65,26830.0],[1510.679,17550.0],[1511.672,24120.0],[1512.655,37230.0],[1528.673,30780.0],[1529.685,41320.0],[1530.673,36070.0],[1546.696,46090.0],[1547.711,32630.0],[1642.749,16910.0]];
    //let mz_error_tol = 0.023;

    //let matched_peaks = annotate_spectrum(spectrum_peaks, frag_table, mz_error_tol, PeakSelectionStrategy::NEAREST_PEAK);

    //let matched_peaks = annotate_spectrum(spectrum_peaks, frag_table, 0.2, PeakSelectionStrategy::HIGHEST_PEAK);


    // See: https://github.com/mobiusklein/mzdata/blob/4050dd35d53ac461f5c71f3f7839f88ef40eb506/src/io/mgf.rs#L728
    use std::fs;
    use std::path;
    use core::result::Result::Ok;

    let path = path::Path::new("./data/OXRIA211021_03_CV45_mzcal.mzDB.mgf");
    let file = fs::File::open(path).expect("Test file doesn't exist");

    let reader = MGFReader::new(file); //MGFReaderType::<_, CentroidPeak, DeconvolutedPeak>::new(file);
    let mut idx = 0;
    let mut highest_matched_peaks_count = 0;

    for scan in reader {
        idx += 1;

        let scan_description = scan.description;
        /*for p in scan_description.to_owned().params {
            println!("{}", p.name);
        }*/

        let prec_charge_opt = scan_description.get_param_by_name("charge").map(|charge_param| {
            let charge_str= charge_param.to_owned().value.chars().take_while(|char| char.is_ascii_digit()).collect::<String>();
            let charge = charge_str.parse::<i8>().unwrap();
            charge
        });

        let prec_mz_opt = scan_description.to_owned().precursor.map(|prec| {prec.ion.mz});
        //println!("prec_mz_opt is {}", prec_mz_opt.unwrap_or(0.0));

        // FIXME: charge not well parsed
        //let prec_charge = 3; //scan_description.to_owned().precursor.map(|prec| {prec.ion.charge}).flatten().unwrap_or_else(|| 0);
        if prec_mz_opt.is_some() && prec_charge_opt.is_some() {

            let prec_charge = prec_charge_opt.unwrap();
            //println!("charge={}", prec_charge);

            let exp_prec_mz = prec_mz_opt.unwrap();
            let theo_prec_mz = mass_to_mz(seq_mass, prec_charge as i32);
            let mz_error = exp_prec_mz - theo_prec_mz;

            if mz_error.abs() <= prec_mz_error_tol {
                println!("mz_error is {}", mz_error);
                let peaks = scan.peaks.unwrap().peaks;

                let peaks_as_arrays: Vec<[f64;2]> = peaks.iter().map(|peak| {
                    //peaks_as_arrays.push([peak.mz,peak.intensity as f64])
                    [peak.mz,peak.intensity as f64]
                }).collect();

                let frag_table = frag_table_by_charge.get(&prec_charge).unwrap(); /*.ok_or(
                    format!("current charge state ({}) exceeding configured range",prec_charge)
                )?;*/

                let matched_peaks = annotate_spectrum(
                    peaks_as_arrays,
                    frag_table.clone(),
                    frag_mz_error_tol,
                    PeakSelectionStrategy::HIGHEST_PEAK
                );

                let n_matches = matched_peaks.len();
                println!("{}", n_matches);

                if n_matches > highest_matched_peaks_count {
                    highest_matched_peaks_count = n_matches;
                    println!("new best spectrum is: {}", scan_description.to_owned().id);
                }
            }
        }


        //panic!("stop here");
    }


    Ok(())
}



/*
fn main() {
    println!("Hello, world!");

    let val1 = 7.12;
    let val2 = 7.121;

    let mdiff = mass_diff(val1,val2,true);

    let mut composition = ChemicalComposition::parse("H2O").unwrap();
    //composition["C"] = 6;
    //composition["O"] = 6;
    //composition["H"] = 12;
    println!("H={} O={}",composition["H"],composition["O"]);

    let m = composition.mass();
    //assert!((composition.mass() - 180.06339).abs() < 1e-6);


    let no = 0;


}*/

/*
std_aa_comp.update({
    'A':   Composition({'H': 5, 'C': 3, 'O': 1, 'N': 1}),
    'C':   Composition({'H': 5, 'C': 3, 'S': 1, 'O': 1, 'N': 1}),
    'D':   Composition({'H': 5, 'C': 4, 'O': 3, 'N': 1}),
    'E':   Composition({'H': 7, 'C': 5, 'O': 3, 'N': 1}),
    'F':   Composition({'H': 9, 'C': 9, 'O': 1, 'N': 1}),
    'G':   Composition({'H': 3, 'C': 2, 'O': 1, 'N': 1}),
    'H':   Composition({'H': 7, 'C': 6, 'N': 3, 'O': 1}),
    'I':   Composition({'H': 11, 'C': 6, 'O': 1, 'N': 1}),
    'J':   Composition({'H': 11, 'C': 6, 'O': 1, 'N': 1}),
    'K':   Composition({'H': 12, 'C': 6, 'N': 2, 'O': 1}),
    'L':   Composition({'H': 11, 'C': 6, 'O': 1, 'N': 1}),
    'M':   Composition({'H': 9, 'C': 5, 'S': 1, 'O': 1, 'N': 1}),
    'N':   Composition({'H': 6, 'C': 4, 'O': 2, 'N': 2}),
    'P':   Composition({'H': 7, 'C': 5, 'O': 1, 'N': 1}),
    'Q':   Composition({'H': 8, 'C': 5, 'O': 2, 'N': 2}),
    'R':   Composition({'H': 12, 'C': 6, 'N': 4, 'O': 1}),
    'S':   Composition({'H': 5, 'C': 3, 'O': 2, 'N': 1}),
    'T':   Composition({'H': 7, 'C': 4, 'O': 2, 'N': 1}),
    'V':   Composition({'H': 9, 'C': 5, 'O': 1, 'N': 1}),
    'W':   Composition({'C': 11, 'H': 10, 'N': 2, 'O': 1}),
    'Y':   Composition({'H': 9, 'C': 9, 'O': 2, 'N': 1}),
    'U':   Composition({'H': 5, 'C': 3, 'O': 1, 'N': 1, 'Se' : 1}),
    'O':   Composition({'H': 19, 'C': 12, 'O': 2, 'N': 3}),
    'H-':  Composition({'H': 1}),
    '-OH': Composition({'O': 1, 'H': 1}),
    })


std_ion_comp.update({
    'M':        Composition(formula=''),
    'M-H2O':    Composition(formula='H-2O-1'),
    'M-NH3':    Composition(formula='N-1H-3'),
    'a':        Composition(formula='H-2O-1' + 'C-1O-1'),
    'a-H2O':    Composition(formula='H-2O-1' + 'C-1O-1' + 'H-2O-1'),
    'a-NH3':    Composition(formula='H-2O-1' + 'C-1O-1' + 'N-1H-3'),
    'b':        Composition(formula='H-2O-1'),
    'b-H2O':    Composition(formula='H-2O-1' + 'H-2O-1'),
    'b-NH3':    Composition(formula='H-2O-1' + 'N-1H-3'),
    'c':        Composition(formula='H-2O-1' + 'NH3'),
    'c-1':      Composition(formula='H-2O-1' + 'NH3' + 'H-1'),
    'c-dot':    Composition(formula='H-2O-1' + 'NH3' + 'H1'),
    'c+1':      Composition(formula='H-2O-1' + 'NH3' + 'H1'),
    'c+2':      Composition(formula='H-2O-1' + 'NH3' + 'H2'),
    'c-H2O':    Composition(formula='H-2O-1' + 'NH3' + 'H-2O-1'),
    'c-NH3':    Composition(formula='H-2O-1'),
    'x':        Composition(formula='H-2O-1' + 'CO2'),
    'x-H2O':    Composition(formula='H-2O-1' + 'CO2' + 'H-2O-1'),
    'x-NH3':    Composition(formula='H-2O-1' + 'CO2' + 'N-1H-3'),
    'y':        Composition(formula=''),
    'y-H2O':    Composition(formula='H-2O-1'),
    'y-NH3':    Composition(formula='N-1H-3'),
    'z':        Composition(formula='H-2O-1' + 'ON-1H-1'),
    'z-dot':    Composition(formula='H-2O-1' + 'ON-1'),
    'z+1':      Composition(formula='H-2O-1' + 'ON-1H1'),
    'z+2':      Composition(formula='H-2O-1' + 'ON-1H2'),
    'z+3':      Composition(formula='H-2O-1' + 'ON-1H3'),
    'z-H2O':    Composition(formula='H-2O-1' + 'ON-1H-1' + 'H-2O-1'),
    'z-NH3':    Composition(formula='H-2O-1' + 'ON-1H-1' + 'N-1H-3'),
    })
 */

/**
    Calculate the mass difference(s).
    Parameters
    ----------
    mz1
        First m/z value(s).
    mz2
        Second m/z value(s).
    mode_is_da : bool
        Is mass difference in Dalton (True) or in ppm (False)?
    Returns
    -------
        The mass difference(s) between the given m/z values.
    */

fn mass_diff(mz1: f64, mz2: f64, mode_is_da: bool) -> f64 {
    if mode_is_da {
        mz1 - mz2
    } else {
        (mz1 - mz2) / mz2 * i32::pow(10,6) as f64
    }
}

